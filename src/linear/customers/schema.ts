import {z} from "zod"

export const linearCustomerFragment = `
    id
    name
    logoUrl
    externalIds
`

export const linearCustomerSchema = z.object({
    id: z.string(),
    name: z.string(),
    logoUrl: z.string().nullable(),
    externalIds: z.array(z.string()),
})

export type LinearCustomer = z.infer<typeof linearCustomerSchema>

export const customerCreateInputSchema = z.object({
    /** The domains associated with this customer. */
    domains: z.array(z.string()).optional(),
    /** The ids of the customers in external systems. */
    externalIds: z.array(z.string()).optional(),
    /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
    id: z.string().optional(),
    /** The main source of the customer, for customers with multiple sources. Must be one of externalIds. */
    mainSourceId: z.string().optional(),
    /** The name of the customer. */
    name: z.string(),
    /** The user who owns the customer. */
    ownerId: z.string().optional(),
    /** The annual revenue generated by the customer. */
    revenue: z.number().optional(),
    /** The size of the customer. */
    size: z.number().optional(),
    /** The ID of the Slack channel used to interact with the customer. */
    slackChannelId: z.string().optional(),
    /** The status of the customer. */
    statusId: z.string().optional(),
    /** The tier of the customer customer. */
    tierId: z.string().optional(),
})

export type CustomerCreateInput = z.infer<typeof customerCreateInputSchema>
